# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
# version: 2
# jobs:
#   build:
#     docker:
#       # specify the version you desire here
#       - image: circleci/ruby:2.5.3-node-browsers
#         environment:
#           - BUNDLER_VERSION: 2.0.2
#           - RAILS_ENV: 'test'
#       # Specify service dependencies here if necessary
#       # CircleCI maintains a library of pre-built images
#       # documented at https://circleci.com/docs/2.0/circleci-images/
#       - image: circleci/mysql:5.7
#         environment:
#           - MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
#           - MYSQL_ROOT_HOST: '%'

#     working_directory: ~/languageMemoApp

#     steps:
#       - checkout

#       # Download and cache dependencies
#       - restore_cache:
#           keys:
#           - v1-dependencies-{{ checksum "Gemfile.lock" }}
#           # fallback to using the latest cache if no exact match is found
#           - v1-dependencies-

#       - run:
#           name: install dependencies
#           command: |
#             bundle install --jobs=4 --retry=3 --path vendor/bundle

#       - save_cache:
#           paths:
#             - ./vendor/bundle
#           key: v1-dependencies-{{ checksum "Gemfile.lock" }}

#       - run: mv config/database.yml.ci config/database.yml

#       - run:
#           name: Wait for DB
#           command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s

#       # Database setup
#       - run: bundle exec rake db:create
#       - run: bundle exec rake db:migrate

#       # run tests!
#       - type: shell
#         command: |
#           bundle exec rspec --profile 10 \
#                             --format RspecJunitFormatter \
#                             --out test_results/rspec.xml \
#                             --format progress \
#                             $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

#       # collect reports
#       - store_test_results:
#           path: /tmp/test-results
#       - store_artifacts:
#           path: /tmp/test-results
#           destination: test-results

      # run rubocop
      # - run:
      #     name: run rubocop
      #     command: bundle exec rubocop

version: 2.1
jobs:
  build:
    machine: true
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: docker-compose build
          command: |
            set -x
            docker-compose build
      - run:
          name: docker-compose up
          command: |
            set -x
            docker-compose up -d
      - run:
          name: test
          command: |
            mkdir /tmp/test-results
            docker-compose run rails bundle install
            docker-compose run rails bundle exec rake db:create RAILS_ENV=test
            docker-compose run rails bundle exec rake db:migrate RAILS_ENV=test
            TEST_FILES="$(circleci tests glob 'spec/**/*_spec.rb' | circleci tests split --split-by=timings)"
            docker-compose run rails bundle exec rspec --format progress \
            --out /tmp/test-results/rspec.xml \
            $TEST_FILES
      - run:
          name: docker-compose stop
          command: |
            set -x
            docker-compose stop
      - run:
          name: docker-compose down
          command: docker-compose down
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

orbs:
  aws-ecr: circleci/aws-ecr@0.0.2
  aws-ecs: circleci/aws-ecs@0.0.3
  
workflows:
  build-and-deploy:
    jobs:
      - aws-ecr/build_and_push_image:
          account-url: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          repo: "${AWS_RESOURCE_NAME_PREFIX_API}"
          region: ${AWS_DEFAULT_REGION}
          tag: "${CIRCLE_SHA1}"
      - aws-ecr/build_and_push_image:
          account-url: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          repo: "${AWS_RESOURCE_NAME_PREFIX_FRONT}"
          region: ${AWS_DEFAULT_REGION}
          tag: "${CIRCLE_SHA1}"
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build_and_push_image
          aws-region: ${AWS_DEFAULT_REGION}
          family: "${AWS_RESOURCE_NAME_PREFIX}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX}-cluster"
          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX_API}-service,tag=${CIRCLE_SHA1}"
      
# orbs:
#   aws-ecr: circleci/aws-ecr@6.6.0
#   aws-ecs: circleci/aws-ecs@1.0.4

# workflows:
#   test-and-deploy:
#     jobs:
#       - test
#       - aws-ecr/build-and-push-image:
#           filters:
#             branches:
#               only: master
#           account-url: AWS_ACCOUNT_URL
#           repo: poeta-api
#           region: AWS_DEFAULT_REGION
#           aws-access-key-id: AWS_ACCESS_KEY_ID
#           aws-secret-access-key: AWS_SECRET_ACCESS_KEY
#           tag: "${CIRCLE_SHA1}"
#           extra-build-args: "--build-arg RAILS_MASTER_KEY=${RAILS_MASTER_KEY} --build-arg MYSQL_HOST=${STAGING_DATABASE_HOST} --build-arg MYSQL_PASSWORD=${STAGING_DATABASE_PASSWORD}"
#       - staging_deploy:
#           requires:
#               - test
#               - aws-ecr/build-and-push-image
#           filters:
#             branches:
#               only: master
#       - production_deploy:
#           requires:
#               - test
#           filters:
#             tags:
#               only: /^v*/
#             branches:
#               ignore: /.*/
