FORMAT: 1A
HOST: http://localhost/api/v1

# poeta API
poetaのAPI仕様書

## ユーザー登録関連API [/auth]

### ユーザー登録 [POST]
新規ユーザーを登録する。

+ Request
  + Attributes
      + email: `poeta@example.com` (string, required) - メールアドレス
      + password: `password` (string, required) - パスワード

+ Response 200 (application/json)
  + Attributes
        + data
            + id: 1,
            + type: users,
            + attributes
                + name: `null`,
                + profile: `null`,
                + address: `null`,
                + username: `null`,
                + twitter_link: `https://~`,
                + github_link: `https://~`,
                + image: `null`,
                + posts: `[]`,
                + folders: `[]`,
                + created_at: `2020-03-05`,
                + updated_at: `2020-03-05`

+ Response 422 (application/json)
    + Attributes
          + status: error
          + errors
              + email: ["を入力してください"]
              + full_messages: ["Emailを入力してください"]

### ユーザー削除 [DELETE]
ユーザーを削除する。

+ Request (application/json)

      + Headers

            uid: "ログイン時にレスポンスヘッダで返されたuid"
            client: "ログイン時にレスポンスヘッダで返されたclient"
            access_token: "ログイン時にレスポンスヘッダで返されたaccess_token"

+ Response 200 (application/json)
    + Attributes
        + status: success,
        + message: Account with UID 'poeta@example.com' has been destroyed.


### ユーザー更新 [PUT]
ユーザーの情報を編集する。

+ Request

      + Headers

            uid: "ログイン時にレスポンスヘッダで返されたuid"
            client: "ログイン時にレスポンスヘッダで返されたclient"
            access_token: "ログイン時にレスポンスヘッダで返されたaccess_token"

    + Attributes
        + name: ``
        + profile:``
        + username:``
        + avatar:``
        + address:``
        + image:``

+ Response 200 (application/json)
  + Attributes
        + data
            + id: 1,
            + type: users,
            + attributes
                + name: `poeta`,
                + profile: `null`,
                + address: `null`,
                + username: `null`,
                + twitter_link: `https://~`,
                + github_link: `https://~`,
                + image: `null`,
                + created_at: `2020-03-05`,
                + updated_at: `2020-03-05`


### トークンの有効性を検証 [GET /auth/validate_token]
リクエストヘッダを見てユーザーがログイン状態かどうか判定する。

+ Request

      + Headers

            uid: "ログイン時にレスポンスヘッダで返されたuid"
            client: "ログイン時にレスポンスヘッダで返されたclient"
            access_token: "ログイン時にレスポンスヘッダで返されたaccess_token"

+ Response 200 (application/json)
    + Attributes
        + success: true,
        + data
            + id: 1,
            + type: users,
            + attributes
                + name: `poeta`,
                + profile: `null`,
                + address: `null`,
                + username: `null`,
                + image: `null`,
                + created_at: `2020-03-05`,
                + updated_at: `2020-03-05`



## ユーザー関連API [/users]

### ユーザー詳細 [GET /users/{user_name}]
ユーザーのマイページを取得する。

+ Parameters
    + user_name: STQnpFar9JfTusk (ユーザーネーム)

+ Response 200 (application/json)
  + Attributes
        + data
            + id: 1,
            + type: users,
            + attributes
                + name: `poeta`,
                + profile: `null`,
                + address: `null`,
                + posts(array)
                    + id: 1,
                    + user_id: 1,
                    + content: ~,
                    + public: true,
                    + folder_id: null,
                    + created_at: ~,
                    + updated_at: ~,
                + folders(array)
                    + id: 1,
                    + user_id: 1,
                    + public: true,
                    + created_at: ~,
                    + updated_at: ~ 
                + username: `STQnpFar9JfTusk`,
                + twitter_link: `https://~`,
                + github_link: `https://~`,
                + image: `null`,
                + created_at: `2020-03-05`,
                + updated_at: `2020-03-05`


## セッション関連API [/auth/sign_in]

### ログイン [POST /auth/sign_in]
ログインする。

+ Request
    + Attributes
        + email: `poeta@example.com` (string, required)
        + password: `password` (string, required)

+ Response 200 (application/json)

      + Headers

            uid: `poeta@example.com`
            client: `ランダムな文字列`
            access_token: `ランダムな文字列`

    + Attributes
        + data
            + id: 1,
            + type: users,
            + attributes
                + name: null,
                + profile: null,
                + address: null,
                + username: null,
                + image: null,
                + posts: `[]`,
                + folders: `[]`,
                + created_at: ``,
                + updated_at: ``


+ Response 401 (application/json)
    + Attributes
        + success: false,
        + errors: [
            "'poeta@example.com' に確認用のメールを送信しました。メール内の説明を読み、アカウントの有効化をしてください。"
        ]

### ログアウト [DELETE /auth/sign_out]
現在ログインしているアカウントからログアウトする。

+ Request

      + Headers

            uid: "ログイン時にレスポンスヘッダで返されたuid"
            client: "ログイン時にレスポンスヘッダで返されたclient"
            access_token: "ログイン時にレスポンスヘッダで返されたaccess_token"

+ Response 200 (application/json)
  + Attributes
      + success: true

## パスワード変更関連API [/auth/password]

### パスワード変更用メール送信 [POST]
パスワード変更用のリンクを含むメールを送信する。

+ Request
  + Attributes
      + email: `poeta@example.com` (string, required) - メールアドレス
      + redirect_url: `http://localhost:3000/~` (string, required) - リンクを踏んだ際のリダイレクト先URL

+ Response 200 (application/json)
  + Attributes
      + success: true
      + message: "'poeta@example.com' にパスワードリセットの案内が送信されました。"

### パスワード変更 [PUT]
パスワードを変更する。

+ Request
  + Headers
  
              uid: "ログイン時にレスポンスヘッダで返されたuid"
              client: "ログイン時にレスポンスヘッダで返されたclient"
              access_token: "ログイン時にレスポンスヘッダで返されたaccess_token"
  + Attributes
      + password: `password`
      + password_confirmation: `password`

+ Response 200 (application/json)
  + Attributes
      + success: true
      + data
              + id: 1,
              + type: users,
              + attributes
                  + name: null,
                  + profile: null,
                  + address: null,
                  + image: null,
                  + posts: `[]`,
                  + folders: `[]`
                  + username: null,
                  + created_at: ``,
                  + updated_at: ``
      + message: "パスワードの更新に成功しました。"

+ Response 422 (application/json)
  + Attributes
      + success: false
      + errors
          + password_confirmation: ["とPasswordの入力が一致しません"]
          + full_messages: [
              "Password confirmationとPasswordの入力が一致しません"
          ]

## Oauth認証API [/auth/:provider]
Oauth認証を行う。

### Oauth認証 [GET]
現在、:providerの欄にはtwitter,github,google_oauth2の3つが対応している。
GETすると各サービスの認証画面へ遷移。認証に成功すると、リダイレクトを2回挟んで/auth/:provider/callbackへと遷移。このリソースからの
レスポンスヘッダに、ログインに必要なuid, client, access_tokenが含まれいる。

+ Response 200 (application/text/html)

## TIL関連API [/posts/]

### TIL詳細 [GET /posts/{id}]
TILの詳細を取得する

+ Parameters
    + id: 1 (TILのID)
      
+ Response 200 (application/json)
   + Attributes
        + data
            + id: 1,
            + type: posts,
            + attributes
                + name: `example`,
                + content: `example2`,
                + public: false,
                + user_id: 1,
                + ancestor_folders(array)
                      + id: 2,
                      + name: `a`,
                      + user_id: 1,
                      + public: true,
                      + created_at: ~,
                      + updated_at: ~ ,
                      + parent_id: 1
                + created_at: `2020-03-05`,
                + updated_at: `2020-03-05`

### TIL投稿 [POST]
TILを投稿する

+ Request
      + Headers

            uid: "ログイン時にレスポンスヘッダで返されたuid"
            client: "ログイン時にレスポンスヘッダで返されたclient"
            access_token: "ログイン時にレスポンスヘッダで返されたaccess_token"

      + Attributes
         + name: "example",
         + content: "example2",
         + public :false,
         + user_id: 1
         + folder_id: 1

+ Response 200 (application/json)
  + Attributes
        + data
            + id: 1,
            + type: posts,
            + attributes
                + name: `example`,
                + content: `example2`,
                + public: false,
                + user_id: 1,
                + ancestor_folders(array)
                      + id: 2,
                      + name: `a`,
                      + user_id: 1,
                      + public: true,
                      + created_at: ~,
                      + updated_at: ~ ,
                      + parent_id: 1
                + created_at: `2020-03-05`,
                + updated_at: `2020-03-05`

+ Response 422 (application/json)
  + Attributes
      + success: error,
      + errors
            + name: ["を入力してください"]
            + full_messages: [ "を入力してください"]


### TIL更新[PUT /posts/{id}]
TILを更新する

+ Parameters
      + id: 1 (ポストID)

+ Request
      + Headers

            uid: "ログイン時にレスポンスヘッダで返されたuid"
            client: "ログイン時にレスポンスヘッダで返されたclient"
            access_token: "ログイン時にレスポンスヘッダで返されたaccess_token"

      + Attributes
          + name: "update_example",
          + content: "update_example2",
          + public :false

+ Response 200 (application/json)
  + Attributes
        + data
            + id: 1,
            + type: posts,
            + attributes
                + name: `update_example`,
                + content: `update_example2`,
                + public: false,
                + user_id: 1,
                + ancestor_folders(array)
                      + id: 2,
                      + name: `a`,
                      + user_id: 1,
                      + public: true,
                      + created_at: ~,
                      + updated_at: ~ ,
                      + parent_id: 1
                + created_at: `2020-03-05`,
                + updated_at: `2020-03-05`

+ Response 401 (application/json)
  + Attributes
      + success: false,
      + errors
            + ["You don't have the right to access this resource"]

+ Response 422 (application/json)
  + Attributes
      + success: error,
      + errors
            + name: ["を入力してください"]
            + content: [ "を入力してください"]

### TIL削除[DELETE /posts/{id}]
TILを削除する

+ Parameters
      + id: 1 (TILのID)


+ Request

      + Headers

            uid: "ログイン時にレスポンスヘッダで返されたuid"
            client: "ログイン時にレスポンスヘッダで返されたclient"
            access_token: "ログイン時にレスポンスヘッダで返されたaccess_token"


+ Response 200 (application/json)
   + Attributes
       + status: 200,
       + message: 削除に成功しました

+ Response 401 (application/json)
  + Attributes
      + success: false,
      + errors
          + ["You don't have the right to access this resource"]

## フォルダー関連API [/folders/]

### フォルダー詳細 [GET /folders/{id}]
フォルダーの詳細を取得する。

+ Parameters
    + id: 1 (フォルダーID)

+ Response 200 (application/json)
   + Attributes
        + data
            + id: 1,
            + type: folders,
            + attributes
                + name: `example`,
                + public: false,
                + user_id: 1,
                + created_at: `2020-03-05`,
                + updated_at: `2020-03-05`
                + posts(array)
                       + name: `example`,
                       + content: `example2`,
                       + public: false,
                       + user_id: 1,
                       + created_at: `2020-03-05`,
                       + updated_at: `2020-03-05` ]

                + ancestor_folders(array)
                      + id: 2,
                      + name: `a`,
                      + user_id: 1,
                      + public: true,
                      + created_at: ~,
                      + updated_at: ~ ,
                      + parent_id: 1

                + child_folders(array)
                    + id: 1,
                    + user_id: 1,
                    + public: true,
                    + created_at: ~,
                    + updated_at: ~ 

### フォルダー作成[POST /folders/{id}]
Folderを作成する

+ Request
      + Headers

            uid: "ログイン時にレスポンスヘッダで返されたuid"
            client: "ログイン時にレスポンスヘッダで返されたclient"
            access_token: "ログイン時にレスポンスヘッダで返されたaccess_token"
      
      + Attributes
          + name: "example",
          + public :false,
          + user_id: 1,
          + parent_id: 2

+ Response 200 (application/json)
  + Attributes
        + data
            + id: 1,
            + type: posts,
            + attributes
                + name: `example`,
                + public: false,
                + user_id: 1,
                + created_at: `2020-03-05`,
                + updated_at: `2020-03-05`
                + posts(array)
                       + name: `example`,
                       + content: `example2`,
                       + public: false,
                       + user_id: 1,
                       + created_at: `2020-03-05`,
                       + updated_at: `2020-03-05` ]

                + ancestor_folders(array)
                      + id: 2,
                      + name: `a`,
                      + user_id: 1,
                      + public: true,
                      + created_at: ~,
                      + updated_at: ~ ,
                      + parent_id: 1
                + child_folders: []

+ Response 422 (application/json)
  + Attributes
      + success: error,
      + errors
            + name: ["を入力してください"]

### フォルダー更新 [PUT /folders/{id}/]
folderを更新する

+ Parameters
    + id: 1 (フォルダーID)

+ Request
      + Headers

            uid: "ログイン時にレスポンスヘッダで返されたuid"
            client: "ログイン時にレスポンスヘッダで返されたclient"
            access_token: "ログイン時にレスポンスヘッダで返されたaccess_token"
      + Attributes
          + name: `update_example`,
          + public: false

+ Response 200 (application/json)
  + Attributes
        + data
            + id: 1,
            + type: folders,
            + attributes
                + name: `update_example`,
                + public: false,
                + user_id: 1,
                + posts: `[]`,
                + ancestor_folders:`[{~}]`,
                + child_folders: `[]`,
                + created_at: `2020-03-05`,
                + updated_at: `2020-03-05`

+ Response 401 (application/json)
  + Attributes
      + success: false
      + errors
            + ["You don't have the right to access this resource"]

+ Response 422 (application/json)
  + Attributes
      + success: error
      + errors
            + name: ["を入力してください"]

### フォルダー削除 [DELETE /folders/{id}]

+ Parameters
    + id: 1 (フォルダーID)

+ Request
      + Headers

            uid: "ログイン時にレスポンスヘッダで返されたuid"
            client: "ログイン時にレスポンスヘッダで返されたclient"
            access_token: "ログイン時にレスポンスヘッダで返されたaccess_token"

+ Response 200 (application/json)
   + Attributes
        + status: 200,
        + message: 削除に成功しました

+ Response 401 (application/json)
  + Attributes
      + success: false
      + errors
            + ["You don't have the right to access this resource"]
